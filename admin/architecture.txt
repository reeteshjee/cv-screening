// Recruitment System Architecture
// Core Components & Technology Stack

// 1. BACKEND SERVICES
// ------------------
// Server: PHP 8+
// Database: MySQL for relational data storage
// Authentication: PHP session-based authentication
// File Storage: Server file system for resume storage
// AI Integration: Gemini API for CV analysis via PHP cURL requests

// 2. FRONTEND 
// ------------------
// HTML5 for structure
// CSS3 with Tailwind CSS for styling
// jQuery for DOM manipulation and AJAX requests
// DataTables for data presentation
// Chart.js for analytics visualization

// 3. SYSTEM MODULES
// ------------------

/**
 * Database Schema - Main Tables
 */

/*
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    role ENUM('admin', 'recruiter', 'candidate') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE jobs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    requirements TEXT NOT NULL,
    location VARCHAR(255),
    job_type ENUM('full-time', 'part-time', 'contract', 'internship') NOT NULL,
    salary_range VARCHAR(100),
    posted_by INT NOT NULL,
    status ENUM('draft', 'published', 'closed') NOT NULL DEFAULT 'draft',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (posted_by) REFERENCES users(id)
);

CREATE TABLE applications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    job_id INT NOT NULL,
    candidate_id INT NOT NULL,
    resume_path VARCHAR(255) NOT NULL,
    cover_letter TEXT,
    status ENUM('applied', 'screening', 'interview', 'rejected', 'hired') NOT NULL DEFAULT 'applied',
    ai_score DECIMAL(5,2),
    ai_feedback TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (job_id) REFERENCES jobs(id),
    FOREIGN KEY (candidate_id) REFERENCES users(id)
);

CREATE TABLE screening_criteria (
    id INT AUTO_INCREMENT PRIMARY KEY,
    job_id INT NOT NULL,
    skill_name VARCHAR(255) NOT NULL,
    importance ENUM('required', 'preferred', 'bonus') NOT NULL,
    weight INT NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (job_id) REFERENCES jobs(id)
);

CREATE TABLE candidate_profiles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    education TEXT,
    experience TEXT,
    skills TEXT,
    phone VARCHAR(20),
    linkedin_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
*/

/**
 * AI Analysis Engine Module 
 * - Handles CV parsing and scoring using Gemini API
 */

/*

*/